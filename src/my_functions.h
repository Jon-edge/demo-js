// src/my_functions.h

#pragma once

#include "mgos.h"
#include "mjs.h"
#include "mgos_neopixel.h"

#ifndef MY_FUNCTIONS_H
#define MY_FUNCTIONS_H

int rand_int(int min, int max, int seed);
void round_to_precision(char *result_str, double number, int precision, size_t result_size);

bool neopixel_set_pixels(int *coords, int count, int r, int g, int b);
void neopixel_set_string(const char *str, int x_offset, int y_offset, int r, int g, int b);
const uint8_t *get_char_data(char c);
void neopixel_clear();
void neopixel_show();

void test_neopixel_print_pixels();
void print_matrix_ascii(int *x_coords, int *y_coords, int count, int width, int height);
bool neopixel_print_pixel(int led_index);

// Font definition
static const uint8_t FONT_DATA[] = {
  0x3E, 0x09, 0x09, 0x09, 0x3E, // Character A
  0x7E, 0x49, 0x49, 0x49, 0x36, // Character B
  0x3C, 0x42, 0x42, 0x42, 0x24, // Character C
  0x7E, 0x42, 0x42, 0x42, 0x3C, // Character D
  0x7E, 0x49, 0x49, 0x49, 0x41, // Character E
  0x7E, 0x09, 0x09, 0x09, 0x01, // Character F
  0x3E, 0x41, 0x49, 0x49, 0x7A, // Character G
  0x7F, 0x08, 0x08, 0x08, 0x7F, // Character H
  0x00, 0x41, 0x7F, 0x41, 0x00, // Character I
  0x20, 0x40, 0x41, 0x3F, 0x01, // Character J
  0x7F, 0x08, 0x14, 0x22, 0x41, // Character K
  0x7F, 0x40, 0x40, 0x40, 0x40, // Character L
  0x7F, 0x02, 0x0C, 0x02, 0x7F, // Character M
  0x7F, 0x04, 0x08, 0x10, 0x7F, // Character N
  0x3E, 0x41, 0x41, 0x41, 0x3E, // Character O
  0x7E, 0x09, 0x09, 0x09, 0x06, // Character P
  0x3E, 0x41, 0x51, 0x21, 0x5E, // Character Q
  0x7E, 0x09, 0x19, 0x29, 0x46, // Character R
  0x46, 0x49, 0x49, 0x49, 0x31, // Character S
  0x01, 0x01, 0x7F, 0x01, 0x01, // Character T
  0x3F, 0x40, 0x40, 0x40, 0x3F, // Character U
  0x1F, 0x20, 0x40, 0x20, 0x1F, // Character V
  0x3F, 0x40, 0x38, 0x40, 0x3F, // Character W
  0x63, 0x14, 0x08, 0x14, 0x63, // Character X
  0x07, 0x08, 0x70, 0x08, 0x07, // Character Y
  0x61, 0x51, 0x49, 0x45, 0x43, // Character Z
  0x20, 0x54, 0x54, 0x54, 0x78, // Character a
  0x7F, 0x48, 0x44, 0x44, 0x38, // Character b
  0x38, 0x44, 0x44, 0x44, 0x20, // Character c
  0x38, 0x44, 0x44, 0x48, 0x7F, // Character d
  0x38, 0x54, 0x54, 0x54, 0x18, // Character e
  0x08, 0x7E, 0x09, 0x01, 0x02, // Character f
  0x0C, 0x52, 0x52, 0x52, 0x3E, // Character g
  0x7F, 0x08, 0x04, 0x04, 0x78, // Character h
  0x00, 0x44, 0x7D, 0x40, 0x00, // Character i
  0x20, 0x40, 0x44, 0x3D, 0x00, // Character j
  0x7F, 0x10, 0x28, 0x44, 0x00, // Character k
  0x00, 0x41, 0x7F, 0x40, 0x00, // Character l
  0x7C, 0x04, 0x18, 0x04, 0x78, // Character m
  0x7C, 0x08, 0x04, 0x04, 0x78, // Character n
  0x38, 0x44, 0x44, 0x44, 0x38, // Character o
  0x7C, 0x14, 0x14, 0x14, 0x08, // Character p
  0x08, 0x14, 0x14, 0x18, 0x7C, // Character q
  0x7C, 0x08, 0x04, 0x04, 0x08, // Character r
  0x48, 0x54, 0x54, 0x54, 0x20, // Character s
  0x04, 0x3F, 0x44, 0x40, 0x20, // Character t
  0x3C, 0x40, 0x40, 0x20, 0x7C, // Character u
  0x1C, 0x20, 0x40, 0x20, 0x1C, // Character v
  0x3C, 0x40, 0x30, 0x40, 0x3C, // Character w
  0x44, 0x28, 0x10, 0x28, 0x44, // Character x
  0x0C, 0x50, 0x50, 0x50, 0x3C, // Character y
  0x44, 0x64, 0x54, 0x4C, 0x44, // Character z
  0x3E, 0x41, 0x41, 0x41, 0x3E, // Number 0
  0x00, 0x42, 0x7F, 0x40, 0x00, // Number 1
  0x42, 0x61, 0x51, 0x49, 0x46, // Number 2
  0x21, 0x41, 0x45, 0x4B, 0x31, // Number 3
  0x18, 0x14, 0x12, 0x7F, 0x10, // Number 4
  0x27, 0x45, 0x45, 0x45, 0x39, // Number 5
  0x3C, 0x4A, 0x49, 0x49, 0x30, // Number 6
  0x01, 0x71, 0x09, 0x05, 0x03, // Number 7
  0x36, 0x49, 0x49, 0x49, 0x36, // Number 8
  0x06, 0x49, 0x49, 0x29, 0x1E, // Number 9
  0x23, 0x13, 0x08, 0x64, 0x62, // Character %
  0x08, 0x08, 0x08, 0x08, 0x08, // Character -
  0x08, 0x08, 0x3E, 0x08, 0x08, // Character +
  0x00, 0x00, 0x40, 0x00, 0x00 // Character .
};

// void print_string(const char *input);

#endif // MY_FUNCTIONS_H